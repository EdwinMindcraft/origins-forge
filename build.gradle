plugins {
	id 'net.minecraftforge.gradle'
	id 'idea'
	id 'org.spongepowered.mixin'
	id 'org.parchmentmc.librarian.forgegradle'
}


group = 'io.github.edwinmindcraft'
version = "${minecraft_version}-${origins_version}"

allprojects {
	apply plugin: 'java'
	apply plugin: 'maven-publish'

	java {
		toolchain {
			languageVersion = JavaLanguageVersion.of(17)
		}
	}

	repositories {
		mavenLocal()
		maven { url 'https://maven.minecraftforge.net/' }
		maven { url 'https://maven.architectury.dev' }
		maven { url 'https://maven.theillusivec4.top' }
		maven { url 'https://repo.spongepowered.org/maven' }
		maven { url 'https://maven.blamejared.com/' }
		maven { url 'https://maven.theillusivec4.top/' }
		maven {
			url 'https://www.cursemaven.com'
			content {
				includeGroup 'curse.maven'
			}
		}
		maven {
			url 'https://repo.unascribed.com'
			content {
				includeGroup "com.unascribed"
			}
		}
		maven { url 'https://jitpack.io' }
        maven { url 'https://maven.merchantpug.net/releases' }
		mavenCentral()
	}
}

subprojects {
	apply plugin: 'net.minecraftforge.gradle'
	apply plugin: 'org.parchmentmc.librarian.forgegradle'
	apply plugin: 'org.spongepowered.mixin'

	project.ext {
		modVersion = rootProject.property(project.name + "_version")
		modSpecs = rootProject.property(project.name + "_specs")
		modName = project.name
	}

	group 'io.github.edwinmindcraft'
	version "${rootProject.minecraft_version}-${project.modVersion}"

	java {
		archivesBaseName = project.name + "-forge"
	}

	minecraft {
		mappings channel: "${rootProject.mappings_channel}", version: "${rootProject.mappings_version}"

		def atFile = project.file("src/main/resources/META-INF/accesstransformer.cfg")
		if (atFile.exists()) accessTransformer atFile
		runs {}
	}

	sourceSets {
		main {
			resources {
				srcDir 'src/generated/resources'
			}
		}
	}

	jar {
		manifest {
			attributes(
					"Specification-Title": project.name,
					"Specification-Vendor": "Apace100",
					"Specification-Version": project.modSpecs,
					"Implementation-Title": project.name + "-forge",
					"Implementation-Version": project.version,
					"Implementation-Vendor": "EdwinMindcraft",
					"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"))
		}
		jar {
			from("LICENSE") {
				rename { "${it}_${project.archivesBaseName}" }
			}
		}
	}

	processResources {
		outputs.upToDateWhen { false }
		filesMatching("META-INF/mods.toml") {
			expand 'version': project.version,
					'mc_version': rootProject.minecraft_version,
					'forge_requirements': rootProject.forge_requirements
		}
	}

    publishing {
        publications {
            mavenJava(MavenPublication) {
                groupId project.group
                artifactId project.archivesBaseName
                version project.version
                artifact jar
            }
        }
        repositories {
            maven {
                name = "merchantpug"
                url = "https://maven.merchantpug.net/releases"
                credentials(PasswordCredentials)
                authentication {
                    create("basic", BasicAuthentication)
                }
            }
            mavenLocal()
        }
    }
}

java {
	archivesBaseName = 'Origins'
}

allprojects {
	dependencies {
		minecraft group: 'net.minecraftforge', name: 'forge', version: "${rootProject.minecraft_version}-${rootProject.forge_version}"
		testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: '5.6.2'
		implementation group: 'org.jetbrains', name: 'annotations', version: '22.0.0'
		implementation group: 'org.spongepowered', name: 'mixin', version: "${rootProject.mixin_version}"
		annotationProcessor "org.spongepowered:mixin:${rootProject.mixin_version}:processor"
		testAnnotationProcessor "org.spongepowered:mixin:${rootProject.mixin_version}:processor"

		compileOnly fg.deobf(group: 'mezz.jei', name: "jei-${rootProject.minecraft_version}-common-api", version: rootProject.jei_version)
		compileOnly fg.deobf(group: 'mezz.jei', name: "jei-${rootProject.minecraft_version}-forge-api", version: rootProject.jei_version)

		compileOnly "curse.maven:citadel-331936:${rootProject.citadel_file}"
		compileOnly fg.deobf("curse.maven:ears-412013:${rootProject.ears_file}")

		runtimeOnly fg.deobf(group: 'mezz.jei', name: "jei-${rootProject.minecraft_version}-forge", version: rootProject.jei_version)
		//runtimeOnly "curse.maven:citadel-331936:${rootProject.citadel_file}"
		//runtimeOnly fg.deobf("curse.maven:ears-412013:${rootProject.ears_file}")
		//runtimeOnly "curse.maven:apocalypse-521235:3837371"
		//runtimeOnly fg.deobf("curse.maven:originsplusplus-602828:3836472")
		//runtimeOnly fg.deobf("curse.maven:pehkui-319596:3808012")
		//runtimeOnly fg.deobf("curse.maven:connectivity-470193:3833738")

		//implementation fg.deobf(group: 'me.shedaniel.cloth', name: 'cloth-config-forge', version: "${cloth_config_version}")
		implementation fg.deobf(group: 'top.theillusivec4.caelus', name: 'caelus-forge', version: "1.19.2-${caelus_version}")
		runtimeOnly(fg.deobf(group: 'de.dafuqs', name: 'additionalentityattributes-forge-1.19', version: "${aea_version}", transitive: false))
		compileOnly(fg.deobf(group: 'de.dafuqs', name: 'additionalentityattributes-forge-1.19', version: "${aea_version}", transitive: false))
	}

	tasks.withType(JavaCompile) {
		if (gradle.startParameter.taskNames.contains("build")) {
			outputs.upToDateWhen { false }
		}
	}
}

dependencies {
	subprojects.forEach({
		implementation(it) {
			exclude group: 'net.minecraftforge', module: 'forge'
		}
	})
}

project(":calio") {
	reobf.maybeCreate("jar").dependsOn(":apoli:classes")
	reobf.maybeCreate("jar").dependsOn(":origins:classes")

	jar {
		manifest {
			attributes(
					"Specification-Title": "calio",
					"Specification-Vendor": "Apace100",
					"Specification-Version": project.calio_specs,
					"Implementation-Title": "calio-forge",
					"Implementation-Version": project.version,
					"Implementation-Vendor": "EdwinMindcraft",
					"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"))
		}
	}
}

project(":apoli") {
	evaluationDependsOn(':calio')

	dependencies {
		implementation(project(":calio")) {
			exclude group: 'net.minecraftforge', module: 'forge'
		}

		jarJar(group: 'de.dafuqs', name: 'additionalentityattributes-forge-1.19', version: "[1.0.1,)", transitive: false) {
			jarJar.pin(it, "${aea_version}")
		}

		jarJar(project(':calio')) {
			transitive = false
			jarJar.pin(it, "${minecraft_version}-${calio_version}")
			jarJar.ranged(it, "[${minecraft_version}-${calio_specs},)")
		}
	}

	jar {
		manifest {
			attributes(
					"Specification-Title": "apoli",
					"Specification-Vendor": "Apace100",
					"Specification-Version": project.apoli_specs,
					"Implementation-Title": "apoli-forge",
					"Implementation-Version": project.version,
					"Implementation-Vendor": "EdwinMindcraft",
					"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
					'MixinConfigs': 'apoli.mixins.json')
		}
	}


	reobf.maybeCreate("jar").dependsOn(":origins:classes")

	mixin {
		add sourceSets.main, 'apoli.refmap.json'

		config 'apoli.mixins.json'
	}

	tasks.findByName("jarJar").dependsOn(project(":calio").tasks.findByName("reobfJar"))

	artifacts {
		archives jar
	}

}

project(":origins") {
	evaluationDependsOn(":apoli")

	dependencies {
		implementation(project(":calio")) {
			exclude group: 'net.minecraftforge', module: 'forge'
		}
		implementation(project(":apoli")) {
			exclude group: 'net.minecraftforge', module: 'forge'
		}

		jarJar(group: 'de.dafuqs', name: 'additionalentityattributes-forge-1.19', version: "[1.0.1,)", transitive: false) {
			jarJar.pin(it, "${aea_version}")
		}

		jarJar(project(':calio')) {
			transitive = false
			jarJar.pin(it, "${minecraft_version}-${calio_version}")
			jarJar.ranged(it, "[${minecraft_version}-${calio_specs},)")
		}

		jarJar(project(':apoli')) {
			transitive = false
			jarJar.pin(it, "${minecraft_version}-${apoli_version}")
			jarJar.ranged(it, "[${minecraft_version}-${apoli_specs},)")
		}
	}

	jar {
		manifest {
			attributes(
					"Specification-Title": "origins",
					"Specification-Vendor": "Apace100",
					"Specification-Version": project.origins_specs,
					"Implementation-Title": "origins-forge",
					"Implementation-Version": project.version,
					"Implementation-Vendor": "EdwinMindcraft",
					"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
					'MixinConfigs': 'origins.mixins.json')
		}
	}

	compileJava.dependsOn(":apoli:classes", ":calio:classes")

	artifacts {
		archives jar
	}

	tasks.findByName("jarJar").configure {
		dependsOn(":apoli:reobfJar", ":calio:reobfJar")
		finalizedBy(reobf.maybeCreate('jarJar'))
	}

	mixin {
		add sourceSets.main, 'origins.refmap.json'

		config 'origins.mixins.json'
	}
}

mixin {
	config 'apoli.mixins.json'
	config 'origins.mixins.json'
}

jar.finalizedBy('reobfJar')

processTestResources {
    outputs.upToDateWhen { false }
    subprojects.each {mod ->
        from mod.sourceSets.test.resources
    }
}

minecraft {
	mappings channel: "${rootProject.mappings_channel}", version: "${rootProject.mappings_version}"

	runs {
		client {
			workingDirectory project.file('run')

            ideaModule "${rootProject.name}.test"
            
			property 'forge.logging.markers', 'REGISTRIES'
			property 'forge.logging.console.level', 'debug'

			taskName 'Client'

			arg '--mixin.debug=true'
			subprojects.each { mod ->
				mods.create(mod.ext.modName) {
					source mod.sourceSets.main
                    source mod.sourceSets.test
				}
			}
		}

		server {
			workingDirectory project.file('run')

            ideaModule "${rootProject.name}.test"

			property 'forge.logging.markers', 'REGISTRIES'
			property 'forge.logging.console.level', 'debug'

			taskName 'Server'

			//arg '--mixin.debug=true'
			subprojects.each { mod ->
				mods.create(mod.ext.modName) {
					source mod.sourceSets.main
                    source mod.sourceSets.test
				}
			}
		}

		data {
			workingDirectory project.file('run')
			property 'forge.logging.markers', 'REGISTRIES'
			property 'forge.logging.console.level', 'debug'

			subprojects.each { mod ->
				mods.create(mod.ext.modName) {
					source mod.sourceSets.main
				}
			}
		}

		subprojects.each { mod ->
			String name = "data" + org.apache.commons.lang3.StringUtils.capitalize(mod.ext.modName)
			runs.create(name) { run ->
				parent runs["data"]
				subprojects.each { if (it != mod) run.args '--existing-mod', it.name }
				taskName org.apache.commons.lang3.StringUtils.capitalize(mod.ext.modName) + " Data"
				args '--all'
				args '--mod', mod.ext.modName
				args '--existing', mod.file('src/main/resources')
				args '--existing', mod.file('src/generated/resources')
				args '--output', mod.file('src/generated/resources/')
			}
		}
	}
}